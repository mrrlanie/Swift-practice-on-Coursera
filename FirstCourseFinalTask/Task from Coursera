Описание задания

Курсовое задание тоже необходимо решать в консольном приложении под macOS.

Однако в этот раз проверка будет немного отличаться. У класса Checker будет только один метод. Вы просто передаете свое решение в конструктор и запускаете проверку вызвав run().

Курсовое задание представляет собой реализацию логики для социальной сети. В ней можно публиковать фотографии, подписываться на других пользователей и ставить лайки. Мы предоставим вам модели для начального заполнения хранилища. Модели для хранения данных вам необходимо создать самостоятельно.

Ваша задача состоит в реализации двух классов, поддерживающих протоколы UsersStorageProtocol и PostsStorageProtocol соответственно. Они представляют собой хранилища данных и поддерживают различные операции над ними. Чтобы излишне не усложнять задание мы убрали возможность регистрации новых пользователей и добавления публикаций. Также не нужно никак связывать эти хранилища между собой. Ни один из тестов не создает одновременно оба хранилища и никак не проверяет их взаимодействие.

В приложении используется термин текущий пользователь. Под ним мы понимаем авторизованного в приложении пользователя. Представьте, что пользователь авторизовался в приложении и мы сохранили его идентификатор. Таким образом все хранилища знают кто это и могут использовать эту информацию в своей логике.

Например, при вызове метода currentUser() хранилище должно вернуть экземпляр структуры, поддерживающей UserProtocol, с данными пользователя, якобы, авторизовавшегося в приложении.

Это похоже на взаимодействие между приложением и сервером. Только при сетевом взаимодействии, естественно, не используется идентификатор пользователя из базы данных. Пользователь вводит логин и пароль в приложении, сервер его проверяет и высылает в ответ некий случайно сгенерированный идентификатор сессии. Далее приложение при запросе любых данных отправляет этот идентификатор и сервер может определить какой пользователь был авторизован. Таким образом запрос, например, профиля вернет данные именно по этому пользователю.

Информация о том, что должен возвращать тот или иной метод доступна в комментариях к протоколу. Также при нахождении ошибки во время тестов будет выводиться сообщение с пояснениями к поведению хранилища.

Для проверки вы должны передать в конструктор класса Checker типы своих хранилищ. Если тестирование закончится успешно вы увидите в консоли кодовое слово.
