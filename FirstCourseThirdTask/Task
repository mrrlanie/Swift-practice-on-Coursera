import Cocoa
import FirstCourseThirdTaskChecker
import FirstCourseThirdTaskChecker.Swift
import Foundation

//
//  FirstCourseThirdTaskChecker.h
//  FirstCourseThirdTaskChecker
//
//  Copyright © 2017 E-Legion. All rights reserved.
//

//! Project version number for FirstCourseThirdTaskChecker.
public var FirstCourseThirdTaskCheckerVersionNumber: Double
/// "Абстрактный" класс представляющий хранилище целых чисел.
open class AbstractStorage {

    /// Текущее количество элементов в хранилище.
    open var count: Int { get }

    /// Инициализатор для создания пустого хранилища.
    required public init()

    /// Метод для добавления новых элементов в хранилище.
    ///
    /// - Parameter element: Новый элемент
    open func push(_ element: Int)

    /// Метод для получения элементов. Checker не будет пытаться достать элемент из пустого
    /// хранилища. Поэтому не нужно реализовывать такую проверку. Полученный элемент из хранилища
    /// должен быть удален.
    ///
    /// - Returns: Элемент, полученный из хранилища.
    open func pop() -> Int
}

public protocol ArrayInitializable {

    /// Инициализатор для создания хранилища, содержащего переданные элементы. Элементы из массива
    /// кладутся в хранилище в том же порядке. Т.е. сначала элемент под индексом 0, потом под
    /// индексом 1 и т.д.
    init(array: [Int])
}

/// "Абстрактный" класс представляющий хранилище, которое можно инициализировать массивом чисел
open class ArrayInitializableStorage : FirstCourseThirdTaskChecker.AbstractStorage {

    /// Инициализатор для создания хранилища, содержащего переданные элементы. Элементы из массива
    /// кладутся в хранилище в том же порядке. Т.е. сначала элемент под индексом 0, потом под
    /// индексом 1 и т.д.
    required public init(array: [Int])

    /// Инициализатор для создания пустого хранилища.
    required public init()
}

public class Checker {

    public init()

    /// Вам необходимо создать два сабкласса ArrayInitializableStorage. Один из них должен
    /// реализовать стек(LIFO), а второй - очередь(FIFO). Список методов и их требования
    /// смотрите в комментариях к классу ArrayInitializableStorage и AbstractStorage.
    /// Для проверки передайте экземпляры этих классов в метод. Если ваше решение окажется
    /// правильным, то в консоли вы увидите часть кодового слова.
    ///
    /// - Parameters:
    ///   - stack: Экземпляр сабкласса ArrayInitializableStorage, реализующий стек.
    ///   - queue: Экземпляр сабкласса ArrayInitializableStorage, реализующий очередь.
    public func checkInheritance(stack: FirstCourseThirdTaskChecker.ArrayInitializableStorage, queue: FirstCourseThirdTaskChecker.ArrayInitializableStorage)

    /// Вам необходимо создать две структуры. Одна из них должна реализовать стек(LIFO), а
    /// вторая - очередь(FIFO). Они должны поддерживать протоколы StorageProtocol и
    /// ArrayInitializable. Список методов и их требования смотрите в комментариях к ним.
    /// Для проверки передайте экземпляры этих структур в метод. Если ваше решение окажется
    /// правильным, то в консоли вы увидите часть кодового слова.
    ///
    /// - Parameters:
    ///   - stack: Экземпляр структуры, реализующей стек.
    ///   - queue: Экземпляр структуры, реализующей очередь.
    public func checkProtocols(stack: FirstCourseThirdTaskChecker.ArrayInitializable & FirstCourseThirdTaskChecker.StorageProtocol, queue: FirstCourseThirdTaskChecker.ArrayInitializable & FirstCourseThirdTaskChecker.StorageProtocol)

    /// Ваша задача добавить в класс User поддержку протоколов JSONSerializable и JSONInitializable.
    /// Требования к ним смотрите в комментариях. Обратите внимание, что проверять данные на
    /// корректность не нужно. Checker всегда будет передавать правильный JSON. Для проверки
    /// передайте в метод тип User. Если ваше решение окажется правильным, то в консоли вы увидите
    /// часть кодового слова. Внимание! Это задание нельзя решать с помощью протокола Codable.
    /// Формат и порядок данных в строке нужно соблюсти строго.
    ///
    /// - Parameter userType: Тип User
    public func checkExtensions(userType: (FirstCourseThirdTaskChecker.User & FirstCourseThirdTaskChecker.JSONInitializable & FirstCourseThirdTaskChecker.JSONSerializable).Type)
}

/// Протокол описывающий сущность, которую можно создать из JSON
public protocol JSONInitializable : AnyObject {

    /// Создает сущность из JSON вида {"property1": value1, "property2": value2}
    ///
    /// - Parameter JSON: JSON, содержащий данные для заполнения полей
    init(JSON: String)
}

/// Протокол описывающий сущность, которую можно конвертировать в JSON
public protocol JSONSerializable : AnyObject {

    /// Конвертирует сущность в JSON вида {"property1": value1, "property2": value2}
    ///
    /// - Returns: Полученный JSON
    func toJSON() -> String
}

/// Протокол представляющий хранилище целых чисел.
public protocol StorageProtocol {

    /// Текущее количество элементов в хранилище.
    var count: Int { get }

    /// Инициализатор для создания пустого хранилища.
    init()

    /// Метод для добавления новых элементов в хранилище.
    ///
    /// - Parameter element: Новый элемент
    mutating func push(_ element: Int)

    /// Метод для получения элементов. Checker не будет пытаться достать элемент из пустого
    /// хранилища. Поэтому не нужно реализовывать такую проверку. Полученый элемент из хранилища
    /// должен быть удален.
    ///
    /// - Returns: Элемент, полученый из хранилища.
    mutating func pop() -> Int
}

/// Класс представляющий пользователя
final public class User {

    public var fullName: String

    public var email: String

    /// Инициализатор создающий пользователя с пустыми полями
    public init()
}


